
/* ----- AREA DE CODIGO DE USUARIO ----- */


/* IMPORTACIONES Y PAQUETES */
package analizadorCJ;
import java_cup.runtime.*;
import errores.Error_;
import java.util.ArrayList;
import java.util.Arrays;
import interprete.sentencias.*;
import interprete.expresiones.*;
import interprete.lenguaje.*;
import interprete.herramientas.*;


/* CODIGO PARA EL PARSER */
/* METODOS PARA RECUPERACION DE ERRORES SINTACTICOS */

parser code{:
    public ArrayList<Instruccion> inst = new ArrayList<Instruccion>() ;
   public ArrayList<Error_ > cup_errores = new ArrayList<Error_> ();
    public ArrayList<Opera> operaciones = new ArrayList<Opera>();

    public void syntax_error(Symbol s){
        // INFORMACION DEL ERROR
        int fila = s.right + 1;
        int columna = s.left + 1;
        //String lexema = s.value.toString();
         Object lexema =  s.value;

        System.out.println("Error Sintactico recuperado; Lexema: " + lexema + " Fila: " + fila + " Columna: " + columna);

    // Se puede añadir más código aquí
    Error_ errores  = new Error_ (lexema,"sintactico",Integer.toString(fila),Integer.toString(columna));
  
   cup_errores.add(errores);

    }

    public void unrecovered_syntax_error(Symbol s){
        // INFORMACION DEL ERROR
        int fila = s.right + 1;
        int columna = s.left + 1;
        Object lexema = s.value;
        System.out.println("Error Sintactico no recuperado; Lexema: " + lexema + " Fila: " + fila + " Columna: " + columna);
    }




:};

// CODIGO PARA ACCIONES GRAMATICALES //
action code{:
:};

/* DECLARACIONES */

/* TERMINALES */


terminal String  UNION;

terminal String  INTERSECCION;

terminal String  COMPLEMENTO;

terminal String  DIFERENCIA;

terminal String  OPERACION;

terminal String  DOS_PUNTOS;


terminal String  GUION;

terminal String  CONJ;

terminal String  LLAVEA;

terminal String  LLAVEC; 

terminal String  FLECHA; 

terminal String  COMA; 


terminal String  EVALUAR;

terminal String  PARENTESIS_A;

terminal String  PARENTESIS_C; 




terminal String  PUNTO_COMA;
terminal String  ASCII;

terminal String  IDENTIFICADOR;







/* NO TERMINALES */
non terminal String inicio;
non terminal Conj conjunto;
non terminal Conjunto conjuntos_guion;


non terminal ArrayList<Character> conjuntos_comas;


non terminal Opera operacion;


non terminal Evaluar evaluar;

non terminal ArrayList<Sentencia> instrucciones;
non terminal Sentencia instruccion;
non terminal Conjunto notaciones;
non terminal  Encapsulado encapsulado;
non terminal ArrayList<Encapsulado> encapsulados;
non terminal Expresion expr;




/* PRECEDENCIA */ 

/* NO TERMINAL INICIAL */
start with inicio;

inicio ::= encapsulados:s {:for (Encapsulado enc: s){inst.add(enc);};:};

encapsulados::= encapsulados:s encapsulado:e  {:RESULT= s; RESULT.add(e);:}|
                            encapsulado:e {:RESULT= new ArrayList<>(Arrays.asList(e));:};

encapsulado::= LLAVEA   instrucciones:insts    LLAVEC {:RESULT = new Encapsulado(instsleft, instsright, insts);:} |
               LLAVEA:a     LLAVEC {: RESULT = new Encapsulado(aleft, aright, new ArrayList<Sentencia>()) ;:};

instrucciones ::= instrucciones:s instruccion:i {:RESULT = s; RESULT.add(i);:}|
                            instruccion:i {:RESULT = new ArrayList<>(Arrays.asList(i));:};

instruccion ::= conjunto:conj  {:RESULT = conj;:}|
                            operacion:op {:RESULT = op;:}|
                            evaluar:ev {:RESULT = ev;:}|
                            encapsulado:en {:RESULT = en;:};



conjuntos_comas ::= conjuntos_comas:cj COMA ASCII:as1 {:RESULT = cj; RESULT.add(as1.charAt(0));:} |
                                ASCII:as2 {:RESULT = new ArrayList <> ( Arrays.asList(as2.charAt(0)));:};

conjunto ::= CONJ DOS_PUNTOS IDENTIFICADOR:id FLECHA  notaciones:noti PUNTO_COMA  {:RESULT = new Conj(idleft, idright, id, noti);:}; 




conjuntos_guion ::=  ASCII:a GUION  ASCII:as {:Conjunto conj = new Conjunto(); conj.rango(a.charAt(0), as.charAt(0)); RESULT = conj;:};





notaciones ::=  conjuntos_guion:cg {:RESULT=cg; :} |
                         conjuntos_comas:cc {:RESULT = new Conjunto(cc);:};



// operaciones

operacion ::= OPERACION DOS_PUNTOS IDENTIFICADOR:id FLECHA expr:e PUNTO_COMA {:RESULT = new Opera(idleft, idright, id, e); operaciones.add(RESULT); :};

// lo hizo un mago
expr ::= LLAVEA IDENTIFICADOR:id LLAVEC  {:RESULT = new AccederId(idleft, idright, id);;:}
       |  UNION expr:e1 expr:e2 {: RESULT = new Union(e1left, e1right, e1, e2); :}
       |  INTERSECCION expr:e1 expr:e2 {: RESULT = new Interseccion(e1left, e1right,e1, e2); :}
       |  DIFERENCIA expr:e1 expr:e2 {: RESULT = new Diferencia(e1left, e1right,e1, e2); :}
       |  COMPLEMENTO expr:e {: RESULT = new Complemento(eleft, eright,e); :}
       ;




//notacion de operaciones



//evaluar


evaluar ::= EVALUAR PARENTESIS_A LLAVEA conjuntos_comas:lista  LLAVEC COMA IDENTIFICADOR:id PARENTESIS_C PUNTO_COMA {:RESULT = new Evaluar(idleft, idright, lista, id);:};







               





                                                               

