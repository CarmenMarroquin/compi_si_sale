
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadorCJ;

import java_cup.runtime.*;
import errores.Error_;
import java.util.ArrayList;
import java.util.Arrays;
import interprete.sentencias.*;
import interprete.expresiones.*;
import interprete.lenguaje.*;
import interprete.herramientas.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\031\000\002\002\004\000\002\002\003\000\002\014" +
    "\004\000\002\014\003\000\002\013\005\000\002\013\004" +
    "\000\002\010\004\000\002\010\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\005\005\000\002\005\003\000\002\003\010\000\002\004" +
    "\005\000\002\012\003\000\002\012\003\000\002\006\010" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\004\000\002\007\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\004\014\004\001\002\000\014\010\015\013" +
    "\016\014\004\015\022\020\021\001\002\000\006\002\000" +
    "\014\004\001\002\000\006\002\ufffe\014\ufffe\001\002\000" +
    "\004\002\010\001\002\000\004\002\001\001\002\000\006" +
    "\002\uffff\014\uffff\001\002\000\014\010\ufff9\013\ufff9\014" +
    "\ufff9\015\ufff9\020\ufff9\001\002\000\014\010\ufff7\013\ufff7" +
    "\014\ufff7\015\ufff7\020\ufff7\001\002\000\014\010\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\020\ufff6\001\002\000\004\011\053" +
    "\001\002\000\004\011\041\001\002\000\014\010\015\013" +
    "\016\014\004\015\040\020\021\001\002\000\014\010\ufffa" +
    "\013\ufffa\014\ufffa\015\ufffa\020\ufffa\001\002\000\004\021" +
    "\024\001\002\000\016\002\ufffc\010\ufffc\013\ufffc\014\ufffc" +
    "\015\ufffc\020\ufffc\001\002\000\014\010\ufff8\013\ufff8\014" +
    "\ufff8\015\ufff8\020\ufff8\001\002\000\004\014\025\001\002" +
    "\000\004\024\026\001\002\000\006\015\ufff4\017\ufff4\001" +
    "\002\000\006\015\031\017\030\001\002\000\004\024\036" +
    "\001\002\000\004\017\032\001\002\000\004\025\033\001" +
    "\002\000\004\022\034\001\002\000\004\023\035\001\002" +
    "\000\014\010\uffe9\013\uffe9\014\uffe9\015\uffe9\020\uffe9\001" +
    "\002\000\010\015\ufff5\017\ufff5\023\ufff5\001\002\000\014" +
    "\010\ufffb\013\ufffb\014\ufffb\015\ufffb\020\ufffb\001\002\000" +
    "\016\002\ufffd\010\ufffd\013\ufffd\014\ufffd\015\ufffd\020\ufffd" +
    "\001\002\000\004\025\042\001\002\000\004\016\043\001" +
    "\002\000\004\024\044\001\002\000\010\012\051\017\ufff4" +
    "\023\ufff4\001\002\000\004\023\050\001\002\000\006\017" +
    "\030\023\ufff0\001\002\000\004\023\ufff1\001\002\000\014" +
    "\010\ufff3\013\ufff3\014\ufff3\015\ufff3\020\ufff3\001\002\000" +
    "\004\024\052\001\002\000\004\023\ufff2\001\002\000\004" +
    "\025\054\001\002\000\004\016\055\001\002\000\014\004" +
    "\061\005\056\006\063\007\060\014\057\001\002\000\014" +
    "\004\061\005\056\006\063\007\060\014\057\001\002\000" +
    "\004\025\072\001\002\000\014\004\061\005\056\006\063" +
    "\007\060\014\057\001\002\000\014\004\061\005\056\006" +
    "\063\007\060\014\057\001\002\000\004\023\065\001\002" +
    "\000\014\004\061\005\056\006\063\007\060\014\057\001" +
    "\002\000\016\004\uffea\005\uffea\006\uffea\007\uffea\014\uffea" +
    "\023\uffea\001\002\000\014\010\uffef\013\uffef\014\uffef\015" +
    "\uffef\020\uffef\001\002\000\014\004\061\005\056\006\063" +
    "\007\060\014\057\001\002\000\016\004\uffed\005\uffed\006" +
    "\uffed\007\uffed\014\uffed\023\uffed\001\002\000\014\004\061" +
    "\005\056\006\063\007\060\014\057\001\002\000\016\004" +
    "\uffeb\005\uffeb\006\uffeb\007\uffeb\014\uffeb\023\uffeb\001\002" +
    "\000\004\015\073\001\002\000\016\004\uffee\005\uffee\006" +
    "\uffee\007\uffee\014\uffee\023\uffee\001\002\000\014\004\061" +
    "\005\056\006\063\007\060\014\057\001\002\000\016\004" +
    "\uffec\005\uffec\006\uffec\007\uffec\014\uffec\023\uffec\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\010\002\006\013\005\014\004\001\001\000" +
    "\016\003\011\006\022\007\012\010\016\011\017\013\013" +
    "\001\001\000\004\013\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\011\006\022\007\012" +
    "\011\036\013\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\046\005\045\012" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\061\001\001\000\004\015\073\001\001\000" +
    "\002\001\001\000\004\015\067\001\001\000\004\015\065" +
    "\001\001\000\002\001\001\000\004\015\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\066\001\001" +
    "\000\002\001\001\000\004\015\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\074" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<Instruccion> inst = new ArrayList<Instruccion>() ;
   public ArrayList<Error_ > cup_errores = new ArrayList<Error_> ();
    public ArrayList<Opera> operaciones = new ArrayList<Opera>();

    public void syntax_error(Symbol s){
        // INFORMACION DEL ERROR
        int fila = s.right + 1;
        int columna = s.left + 1;
        //String lexema = s.value.toString();
         Object lexema =  s.value;

        System.out.println("Error Sintactico recuperado; Lexema: " + lexema + " Fila: " + fila + " Columna: " + columna);

    // Se puede añadir más código aquí
    Error_ errores  = new Error_ (lexema,"sintactico",Integer.toString(fila),Integer.toString(columna));
  
   cup_errores.add(errores);

    }

    public void unrecovered_syntax_error(Symbol s){
        // INFORMACION DEL ERROR
        int fila = s.right + 1;
        int columna = s.left + 1;
        Object lexema = s.value;
        System.out.println("Error Sintactico no recuperado; Lexema: " + lexema + " Fila: " + fila + " Columna: " + columna);
    }






/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {



  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= encapsulados 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Encapsulado> s = (ArrayList<Encapsulado>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		for (Encapsulado enc: s){inst.add(enc);};
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // encapsulados ::= encapsulados encapsulado 
            {
              ArrayList<Encapsulado> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Encapsulado> s = (ArrayList<Encapsulado>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Encapsulado e = (Encapsulado)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= s; RESULT.add(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("encapsulados",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // encapsulados ::= encapsulado 
            {
              ArrayList<Encapsulado> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Encapsulado e = (Encapsulado)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new ArrayList<>(Arrays.asList(e));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("encapsulados",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // encapsulado ::= LLAVEA instrucciones LLAVEC 
            {
              Encapsulado RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Sentencia> insts = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Encapsulado(instsleft, instsright, insts);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("encapsulado",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // encapsulado ::= LLAVEA LLAVEC 
            {
              Encapsulado RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Encapsulado(aleft, aright, new ArrayList<Sentencia>()) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("encapsulado",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= instrucciones instruccion 
            {
              ArrayList<Sentencia> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Sentencia> s = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = s; RESULT.add(i);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= instruccion 
            {
              ArrayList<Sentencia> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(i));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= conjunto 
            {
              Sentencia RESULT =null;
		int conjleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int conjright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Conj conj = (Conj)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = conj;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= operacion 
            {
              Sentencia RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Opera op = (Opera)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = op;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= evaluar 
            {
              Sentencia RESULT =null;
		int evleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int evright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Evaluar ev = (Evaluar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ev;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= encapsulado 
            {
              Sentencia RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Encapsulado en = (Encapsulado)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = en;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // conjuntos_comas ::= conjuntos_comas COMA ASCII 
            {
              ArrayList<Character> RESULT =null;
		int cjleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cjright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Character> cj = (ArrayList<Character>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int as1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int as1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String as1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = cj; RESULT.add(as1.charAt(0));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conjuntos_comas",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // conjuntos_comas ::= ASCII 
            {
              ArrayList<Character> RESULT =null;
		int as2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int as2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String as2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList <> ( Arrays.asList(as2.charAt(0)));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conjuntos_comas",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // conjunto ::= CONJ DOS_PUNTOS IDENTIFICADOR FLECHA notaciones PUNTO_COMA 
            {
              Conj RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int notileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int notiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Conjunto noti = (Conjunto)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Conj(idleft, idright, id, noti);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conjunto",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // conjuntos_guion ::= ASCII GUION ASCII 
            {
              Conjunto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String as = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Conjunto conj = new Conjunto(); conj.rango(a.charAt(0), as.charAt(0)); RESULT = conj;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conjuntos_guion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // notaciones ::= conjuntos_guion 
            {
              Conjunto RESULT =null;
		int cgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Conjunto cg = (Conjunto)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=cg; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("notaciones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // notaciones ::= conjuntos_comas 
            {
              Conjunto RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Character> cc = (ArrayList<Character>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Conjunto(cc);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("notaciones",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operacion ::= OPERACION DOS_PUNTOS IDENTIFICADOR FLECHA expr PUNTO_COMA 
            {
              Opera RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Opera(idleft, idright, id, e); operaciones.add(RESULT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= LLAVEA IDENTIFICADOR LLAVEC 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new AccederId(idleft, idright, id);;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= UNION expr expr 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Union(e1left, e1right, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= INTERSECCION expr expr 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Interseccion(e1left, e1right,e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= DIFERENCIA expr expr 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Diferencia(e1left, e1right,e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= COMPLEMENTO expr 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Complemento(eleft, eright,e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // evaluar ::= EVALUAR PARENTESIS_A LLAVEA conjuntos_comas LLAVEC COMA IDENTIFICADOR PARENTESIS_C PUNTO_COMA 
            {
              Evaluar RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList<Character> lista = (ArrayList<Character>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new Evaluar(idleft, idright, lista, id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluar",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
